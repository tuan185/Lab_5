
SCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003118  08003118  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003118  08003118  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003118  08003118  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000090  080031b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080031b0  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2ba  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e8  00000000  00000000  0002d373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00030288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e44  00000000  00000000  00030eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106c4  00000000  00000000  00049cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088bbc  00000000  00000000  0005a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2f7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003778  00000000  00000000  000e2fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c8 	.word	0x080030c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080030c8 	.word	0x080030c8

0800014c <display7SEG>:
				0x7D, 			//decode for 6
				0x07, 			//decode for 7
				0x7F, 			//decode for 8
				0x6F};			//decode for 9

void display7SEG(uint8_t num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_PORT, SEG_A_PIN, !((LED[num]>>0)&0x01));
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	4a3b      	ldr	r2, [pc, #236]	; (8000248 <display7SEG+0xfc>)
 800015a:	5cd3      	ldrb	r3, [r2, r3]
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	bf0c      	ite	eq
 8000164:	2301      	moveq	r3, #1
 8000166:	2300      	movne	r3, #0
 8000168:	b2db      	uxtb	r3, r3
 800016a:	461a      	mov	r2, r3
 800016c:	2101      	movs	r1, #1
 800016e:	4837      	ldr	r0, [pc, #220]	; (800024c <display7SEG+0x100>)
 8000170:	f001 f949 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_B_PIN, !((LED[num]>>1)&0x01));
 8000174:	79fb      	ldrb	r3, [r7, #7]
 8000176:	4a34      	ldr	r2, [pc, #208]	; (8000248 <display7SEG+0xfc>)
 8000178:	5cd3      	ldrb	r3, [r2, r3]
 800017a:	085b      	lsrs	r3, r3, #1
 800017c:	b2db      	uxtb	r3, r3
 800017e:	f003 0301 	and.w	r3, r3, #1
 8000182:	2b00      	cmp	r3, #0
 8000184:	bf0c      	ite	eq
 8000186:	2301      	moveq	r3, #1
 8000188:	2300      	movne	r3, #0
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	2102      	movs	r1, #2
 8000190:	482e      	ldr	r0, [pc, #184]	; (800024c <display7SEG+0x100>)
 8000192:	f001 f938 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_C_PIN, !((LED[num]>>2)&0x01));
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	4a2b      	ldr	r2, [pc, #172]	; (8000248 <display7SEG+0xfc>)
 800019a:	5cd3      	ldrb	r3, [r2, r3]
 800019c:	089b      	lsrs	r3, r3, #2
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	f003 0301 	and.w	r3, r3, #1
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	bf0c      	ite	eq
 80001a8:	2301      	moveq	r3, #1
 80001aa:	2300      	movne	r3, #0
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	461a      	mov	r2, r3
 80001b0:	2104      	movs	r1, #4
 80001b2:	4826      	ldr	r0, [pc, #152]	; (800024c <display7SEG+0x100>)
 80001b4:	f001 f927 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_D_PIN, !((LED[num]>>3)&0x01));
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4a23      	ldr	r2, [pc, #140]	; (8000248 <display7SEG+0xfc>)
 80001bc:	5cd3      	ldrb	r3, [r2, r3]
 80001be:	08db      	lsrs	r3, r3, #3
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	f003 0301 	and.w	r3, r3, #1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	bf0c      	ite	eq
 80001ca:	2301      	moveq	r3, #1
 80001cc:	2300      	movne	r3, #0
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	461a      	mov	r2, r3
 80001d2:	2108      	movs	r1, #8
 80001d4:	481d      	ldr	r0, [pc, #116]	; (800024c <display7SEG+0x100>)
 80001d6:	f001 f916 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_E_PIN, !((LED[num]>>4)&0x01));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	4a1a      	ldr	r2, [pc, #104]	; (8000248 <display7SEG+0xfc>)
 80001de:	5cd3      	ldrb	r3, [r2, r3]
 80001e0:	091b      	lsrs	r3, r3, #4
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	bf0c      	ite	eq
 80001ec:	2301      	moveq	r3, #1
 80001ee:	2300      	movne	r3, #0
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	461a      	mov	r2, r3
 80001f4:	2110      	movs	r1, #16
 80001f6:	4815      	ldr	r0, [pc, #84]	; (800024c <display7SEG+0x100>)
 80001f8:	f001 f905 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_F_PIN, !((LED[num]>>5)&0x01));
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4a12      	ldr	r2, [pc, #72]	; (8000248 <display7SEG+0xfc>)
 8000200:	5cd3      	ldrb	r3, [r2, r3]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	b2db      	uxtb	r3, r3
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	2b00      	cmp	r3, #0
 800020c:	bf0c      	ite	eq
 800020e:	2301      	moveq	r3, #1
 8000210:	2300      	movne	r3, #0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	461a      	mov	r2, r3
 8000216:	2120      	movs	r1, #32
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <display7SEG+0x100>)
 800021a:	f001 f8f4 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_G_PIN, !((LED[num]>>6)&0x01));
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <display7SEG+0xfc>)
 8000222:	5cd3      	ldrb	r3, [r2, r3]
 8000224:	099b      	lsrs	r3, r3, #6
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	2b00      	cmp	r3, #0
 800022e:	bf0c      	ite	eq
 8000230:	2301      	moveq	r3, #1
 8000232:	2300      	movne	r3, #0
 8000234:	b2db      	uxtb	r3, r3
 8000236:	461a      	mov	r2, r3
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <display7SEG+0x100>)
 800023c:	f001 f8e3 	bl	8001406 <HAL_GPIO_WritePin>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000000 	.word	0x20000000
 800024c:	40010c00 	.word	0x40010c00

08000250 <clearAllLED>:

void clearAllLED(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_EN_1_PORT, SEG_EN_1_PIN, SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <clearAllLED+0x38>)
 800025c:	f001 f8d3 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_EN_2_PORT, SEG_EN_2_PIN, SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000266:	4808      	ldr	r0, [pc, #32]	; (8000288 <clearAllLED+0x38>)
 8000268:	f001 f8cd 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_EN_3_PORT, SEG_EN_3_PIN, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <clearAllLED+0x38>)
 8000274:	f001 f8c7 	bl	8001406 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_EN_4_PORT, SEG_EN_4_PIN, SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4802      	ldr	r0, [pc, #8]	; (8000288 <clearAllLED+0x38>)
 8000280:	f001 f8c1 	bl	8001406 <HAL_GPIO_WritePin>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40010800 	.word	0x40010800

0800028c <control7SEG>:

void control7SEG(uint8_t led7state, uint8_t sec_1, uint8_t sec_2){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	460b      	mov	r3, r1
 8000298:	71bb      	strb	r3, [r7, #6]
 800029a:	4613      	mov	r3, r2
 800029c:	717b      	strb	r3, [r7, #5]
	clearAllLED();
 800029e:	f7ff ffd7 	bl	8000250 <clearAllLED>
	switch(led7state){
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	2b03      	cmp	r3, #3
 80002a6:	d855      	bhi.n	8000354 <control7SEG+0xc8>
 80002a8:	a201      	add	r2, pc, #4	; (adr r2, 80002b0 <control7SEG+0x24>)
 80002aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ae:	bf00      	nop
 80002b0:	080002c1 	.word	0x080002c1
 80002b4:	080002e1 	.word	0x080002e1
 80002b8:	0800030b 	.word	0x0800030b
 80002bc:	0800032b 	.word	0x0800032b
	case 0:
		display7SEG(sec_1/10);
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	4a26      	ldr	r2, [pc, #152]	; (800035c <control7SEG+0xd0>)
 80002c4:	fba2 2303 	umull	r2, r3, r2, r3
 80002c8:	08db      	lsrs	r3, r3, #3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff3d 	bl	800014c <display7SEG>
		HAL_GPIO_WritePin(SEG_EN_1_PORT, SEG_EN_1_PIN, RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d8:	4821      	ldr	r0, [pc, #132]	; (8000360 <control7SEG+0xd4>)
 80002da:	f001 f894 	bl	8001406 <HAL_GPIO_WritePin>
		break;
 80002de:	e039      	b.n	8000354 <control7SEG+0xc8>
	case 1:
		display7SEG(sec_1%10);
 80002e0:	79ba      	ldrb	r2, [r7, #6]
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <control7SEG+0xd0>)
 80002e4:	fba3 1302 	umull	r1, r3, r3, r2
 80002e8:	08d9      	lsrs	r1, r3, #3
 80002ea:	460b      	mov	r3, r1
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	440b      	add	r3, r1
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff28 	bl	800014c <display7SEG>
		HAL_GPIO_WritePin(SEG_EN_2_PORT, SEG_EN_2_PIN, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000302:	4817      	ldr	r0, [pc, #92]	; (8000360 <control7SEG+0xd4>)
 8000304:	f001 f87f 	bl	8001406 <HAL_GPIO_WritePin>
		break;
 8000308:	e024      	b.n	8000354 <control7SEG+0xc8>
	case 2:
		display7SEG(sec_2/10);
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	4a13      	ldr	r2, [pc, #76]	; (800035c <control7SEG+0xd0>)
 800030e:	fba2 2303 	umull	r2, r3, r2, r3
 8000312:	08db      	lsrs	r3, r3, #3
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff18 	bl	800014c <display7SEG>
		HAL_GPIO_WritePin(SEG_EN_3_PORT, SEG_EN_3_PIN, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <control7SEG+0xd4>)
 8000324:	f001 f86f 	bl	8001406 <HAL_GPIO_WritePin>
		break;
 8000328:	e014      	b.n	8000354 <control7SEG+0xc8>
	case 3:
		display7SEG(sec_2%10);
 800032a:	797a      	ldrb	r2, [r7, #5]
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <control7SEG+0xd0>)
 800032e:	fba3 1302 	umull	r1, r3, r3, r2
 8000332:	08d9      	lsrs	r1, r3, #3
 8000334:	460b      	mov	r3, r1
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	440b      	add	r3, r1
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff03 	bl	800014c <display7SEG>
		HAL_GPIO_WritePin(SEG_EN_4_PORT, SEG_EN_4_PIN, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <control7SEG+0xd4>)
 800034e:	f001 f85a 	bl	8001406 <HAL_GPIO_WritePin>
		break;
 8000352:	bf00      	nop
	}
};
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	cccccccd 	.word	0xcccccccd
 8000360:	40010800 	.word	0x40010800

08000364 <createNode>:
 *  Created on: Nov 16, 2023
 *      Author: Admin
 */
#include "LList.h"

struct Node* createNode(Task_TypeDef_t data){
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b087      	sub	sp, #28
 8000368:	af00      	add	r7, sp, #0
 800036a:	463c      	mov	r4, r7
 800036c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 8000370:	2014      	movs	r0, #20
 8000372:	f002 fd97 	bl	8002ea4 <malloc>
 8000376:	4603      	mov	r3, r0
 8000378:	617b      	str	r3, [r7, #20]
	if(!newNode){
		//TODO
	}
	newNode->data.callback = data.callback;
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	601a      	str	r2, [r3, #0]
	newNode->data.Delay = data.Delay;
 8000380:	88ba      	ldrh	r2, [r7, #4]
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	809a      	strh	r2, [r3, #4]
	newNode->data.Period = data.Period;
 8000386:	88fa      	ldrh	r2, [r7, #6]
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	80da      	strh	r2, [r3, #6]
	newNode->data.Runme = data.Runme;
 800038c:	7a3a      	ldrb	r2, [r7, #8]
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	721a      	strb	r2, [r3, #8]
	newNode->data.taskID = data.taskID;
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	60da      	str	r2, [r3, #12]
	newNode->nextNode = NULL;
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
	return newNode;
 800039e:	697b      	ldr	r3, [r7, #20]
};
 80003a0:	4618      	mov	r0, r3
 80003a2:	371c      	adds	r7, #28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd90      	pop	{r4, r7, pc}

080003a8 <addTask>:

void addTask(struct Node** head, Task_TypeDef_t data){
 80003a8:	b084      	sub	sp, #16
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b084      	sub	sp, #16
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	f107 001c 	add.w	r0, r7, #28
 80003b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct Node* newNode = createNode(data);
 80003ba:	f107 031c 	add.w	r3, r7, #28
 80003be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003c0:	f7ff ffd0 	bl	8000364 <createNode>
 80003c4:	60b8      	str	r0, [r7, #8]
	if(*head == NULL){
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d103      	bne.n	80003d6 <addTask+0x2e>
		*head = newNode;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68ba      	ldr	r2, [r7, #8]
 80003d2:	601a      	str	r2, [r3, #0]
		return;
 80003d4:	e045      	b.n	8000462 <addTask+0xba>
	}
	struct Node* temp = *head;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	60fb      	str	r3, [r7, #12]
	if( newNode->data.Delay < temp->data.Delay){
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	889a      	ldrh	r2, [r3, #4]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	889b      	ldrh	r3, [r3, #4]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d20e      	bcs.n	8000406 <addTask+0x5e>
		temp->data.Delay -= newNode->data.Delay;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	889a      	ldrh	r2, [r3, #4]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	889b      	ldrh	r3, [r3, #4]
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	809a      	strh	r2, [r3, #4]
		newNode->nextNode = temp;
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	611a      	str	r2, [r3, #16]
		*head = newNode;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	601a      	str	r2, [r3, #0]
		return;
 8000404:	e02d      	b.n	8000462 <addTask+0xba>
	}

	newNode->data.Delay -= temp->data.Delay;
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	889a      	ldrh	r2, [r3, #4]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	889b      	ldrh	r3, [r3, #4]
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	b29a      	uxth	r2, r3
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	809a      	strh	r2, [r3, #4]
	//printf("newNode: %d\n", newNode->data.Delay);
	while(temp->nextNode != NULL && newNode->data.Delay >= temp->nextNode->data.Delay){
 8000416:	e00a      	b.n	800042e <addTask+0x86>
		temp = temp->nextNode;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	60fb      	str	r3, [r7, #12]
		newNode->data.Delay -= temp->data.Delay;
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	889a      	ldrh	r2, [r3, #4]
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	889b      	ldrh	r3, [r3, #4]
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	b29a      	uxth	r2, r3
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	809a      	strh	r2, [r3, #4]
	while(temp->nextNode != NULL && newNode->data.Delay >= temp->nextNode->data.Delay){
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d006      	beq.n	8000444 <addTask+0x9c>
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	889a      	ldrh	r2, [r3, #4]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	429a      	cmp	r2, r3
 8000442:	d2e9      	bcs.n	8000418 <addTask+0x70>
		//printf("newNode: %d\n", newNode->data.Delay);
	}
	if(temp->nextNode == NULL){
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d103      	bne.n	8000454 <addTask+0xac>
		temp->nextNode = newNode;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	611a      	str	r2, [r3, #16]
 8000452:	e006      	b.n	8000462 <addTask+0xba>
	}else{
		newNode->nextNode = temp->nextNode;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	691a      	ldr	r2, [r3, #16]
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	611a      	str	r2, [r3, #16]
		temp->nextNode = newNode;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	611a      	str	r2, [r3, #16]
	}
};
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800046a:	b004      	add	sp, #16
 800046c:	4770      	bx	lr

0800046e <deleteTask>:

void deleteTask(struct Node** head){
 800046e:	b580      	push	{r7, lr}
 8000470:	b084      	sub	sp, #16
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
	if(head == NULL) return;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00a      	beq.n	8000492 <deleteTask+0x24>
	struct Node* temp = *head;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	60fb      	str	r3, [r7, #12]
	*head = temp->nextNode;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	691a      	ldr	r2, [r3, #16]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]
	free(temp);
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f002 fd12 	bl	8002eb4 <free>
 8000490:	e000      	b.n	8000494 <deleteTask+0x26>
	if(head == NULL) return;
 8000492:	bf00      	nop
};
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <subKeyProcess>:
		return PRESSED_STATE;
	}
	return NORMAL_STATE;
}

void subKeyProcess(int index){
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <subKeyProcess+0x1c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2101      	movs	r1, #1
 80004aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	200000e8 	.word	0x200000e8

080004bc <getKeyInput>:

void getKeyInput(){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	e072      	b.n	80005ae <getKeyInput+0xf2>
		KeyReg2[i] = KeyReg1[i];
 80004c8:	4a3d      	ldr	r2, [pc, #244]	; (80005c0 <getKeyInput+0x104>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d0:	493c      	ldr	r1, [pc, #240]	; (80005c4 <getKeyInput+0x108>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80004d8:	4a3b      	ldr	r2, [pc, #236]	; (80005c8 <getKeyInput+0x10c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e0:	4937      	ldr	r1, [pc, #220]	; (80005c0 <getKeyInput+0x104>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 80004e8:	4a38      	ldr	r2, [pc, #224]	; (80005cc <getKeyInput+0x110>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f0:	4937      	ldr	r1, [pc, #220]	; (80005d0 <getKeyInput+0x114>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4610      	mov	r0, r2
 80004fc:	f000 ff6c 	bl	80013d8 <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	4619      	mov	r1, r3
 8000504:	4a30      	ldr	r2, [pc, #192]	; (80005c8 <getKeyInput+0x10c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800050c:	4a2c      	ldr	r2, [pc, #176]	; (80005c0 <getKeyInput+0x104>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000514:	492c      	ldr	r1, [pc, #176]	; (80005c8 <getKeyInput+0x10c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800051c:	429a      	cmp	r2, r3
 800051e:	d143      	bne.n	80005a8 <getKeyInput+0xec>
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <getKeyInput+0x104>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000528:	4926      	ldr	r1, [pc, #152]	; (80005c4 <getKeyInput+0x108>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000530:	429a      	cmp	r2, r3
 8000532:	d139      	bne.n	80005a8 <getKeyInput+0xec>
		if (KeyReg2[i] != KeyReg3[i]){
 8000534:	4a23      	ldr	r2, [pc, #140]	; (80005c4 <getKeyInput+0x108>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800053c:	4925      	ldr	r1, [pc, #148]	; (80005d4 <getKeyInput+0x118>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000544:	429a      	cmp	r2, r3
 8000546:	d017      	beq.n	8000578 <getKeyInput+0xbc>
		  KeyReg3[i] = KeyReg2[i];
 8000548:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <getKeyInput+0x108>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000550:	4920      	ldr	r1, [pc, #128]	; (80005d4 <getKeyInput+0x118>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <getKeyInput+0x118>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d121      	bne.n	80005a8 <getKeyInput+0xec>
			TimeOutForKeyPress[i] = 500;
 8000564:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <getKeyInput+0x11c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			subKeyProcess(i);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ff93 	bl	800049c <subKeyProcess>
 8000576:	e017      	b.n	80005a8 <getKeyInput+0xec>
		  }
		}else{
		   TimeOutForKeyPress[i] --;
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <getKeyInput+0x11c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	1e5a      	subs	r2, r3, #1
 8000582:	4915      	ldr	r1, [pc, #84]	; (80005d8 <getKeyInput+0x11c>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 800058a:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <getKeyInput+0x11c>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d108      	bne.n	80005a8 <getKeyInput+0xec>
				TimeOutForKeyPress[i] = 500;
 8000596:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <getKeyInput+0x11c>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800059e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				subKeyProcess(i);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ff7a 	bl	800049c <subKeyProcess>
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3301      	adds	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	dd89      	ble.n	80004c8 <getKeyInput+0xc>
			}
		}
		}
	}

}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	200000c4 	.word	0x200000c4
 80005c8:	200000ac 	.word	0x200000ac
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	20000018 	.word	0x20000018
 80005d4:	200000d0 	.word	0x200000d0
 80005d8:	200000dc 	.word	0x200000dc

080005dc <mode_1>:
		mode = INIT;
	}
}


void mode_1(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	switch (trafficstate){
 80005e0:	4b65      	ldr	r3, [pc, #404]	; (8000778 <mode_1+0x19c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	f200 80a2 	bhi.w	800072e <mode_1+0x152>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <mode_1+0x14>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	08000601 	.word	0x08000601
 80005f4:	0800064b 	.word	0x0800064b
 80005f8:	0800068b 	.word	0x0800068b
 80005fc:	080006dd 	.word	0x080006dd
		case GREEN_1:
			HAL_GPIO_WritePin(YELLOW_2_PORT, YELLOW_2_PIN, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000606:	485d      	ldr	r0, [pc, #372]	; (800077c <mode_1+0x1a0>)
 8000608:	f000 fefd 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_1_PORT, RED_1_PIN, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2110      	movs	r1, #16
 8000610:	485a      	ldr	r0, [pc, #360]	; (800077c <mode_1+0x1a0>)
 8000612:	f000 fef8 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_PORT, GREEN_1_PIN, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2120      	movs	r1, #32
 800061a:	4858      	ldr	r0, [pc, #352]	; (800077c <mode_1+0x1a0>)
 800061c:	f000 fef3 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_PORT, RED_2_PIN, SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4855      	ldr	r0, [pc, #340]	; (800077c <mode_1+0x1a0>)
 8000626:	f000 feee 	bl	8001406 <HAL_GPIO_WritePin>
			if(time_1 <= 0){
 800062a:	4b55      	ldr	r3, [pc, #340]	; (8000780 <mode_1+0x1a4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	dc76      	bgt.n	8000720 <mode_1+0x144>
				trafficstate = YELLOW_1;
 8000632:	4b51      	ldr	r3, [pc, #324]	; (8000778 <mode_1+0x19c>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
				time_1 = red_counter-green_counter;
 8000638:	4b52      	ldr	r3, [pc, #328]	; (8000784 <mode_1+0x1a8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b52      	ldr	r3, [pc, #328]	; (8000788 <mode_1+0x1ac>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	4a4e      	ldr	r2, [pc, #312]	; (8000780 <mode_1+0x1a4>)
 8000646:	6013      	str	r3, [r2, #0]
			}
			break;
 8000648:	e06a      	b.n	8000720 <mode_1+0x144>
		case YELLOW_1:
			HAL_GPIO_WritePin(GREEN_1_PORT, GREEN_1_PIN, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	484b      	ldr	r0, [pc, #300]	; (800077c <mode_1+0x1a0>)
 8000650:	f000 fed9 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_PORT, YELLOW_1_PIN, SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	4848      	ldr	r0, [pc, #288]	; (800077c <mode_1+0x1a0>)
 800065a:	f000 fed4 	bl	8001406 <HAL_GPIO_WritePin>
			if(time_1 <= 0 || time_2 <= 0){
 800065e:	4b48      	ldr	r3, [pc, #288]	; (8000780 <mode_1+0x1a4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	dd03      	ble.n	800066e <mode_1+0x92>
 8000666:	4b49      	ldr	r3, [pc, #292]	; (800078c <mode_1+0x1b0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dc5a      	bgt.n	8000724 <mode_1+0x148>
				trafficstate = GREEN_2;
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <mode_1+0x19c>)
 8000670:	2202      	movs	r2, #2
 8000672:	701a      	strb	r2, [r3, #0]
				time_1 = red_counter;
 8000674:	4b43      	ldr	r3, [pc, #268]	; (8000784 <mode_1+0x1a8>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b41      	ldr	r3, [pc, #260]	; (8000780 <mode_1+0x1a4>)
 800067c:	601a      	str	r2, [r3, #0]
				time_2 = green_counter;
 800067e:	4b42      	ldr	r3, [pc, #264]	; (8000788 <mode_1+0x1ac>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4b41      	ldr	r3, [pc, #260]	; (800078c <mode_1+0x1b0>)
 8000686:	601a      	str	r2, [r3, #0]
			}
			break;
 8000688:	e04c      	b.n	8000724 <mode_1+0x148>
		case GREEN_2:
			HAL_GPIO_WritePin(YELLOW_1_PORT, YELLOW_1_PIN, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	483b      	ldr	r0, [pc, #236]	; (800077c <mode_1+0x1a0>)
 8000690:	f000 feb9 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_1_PORT, RED_2_PIN, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4838      	ldr	r0, [pc, #224]	; (800077c <mode_1+0x1a0>)
 800069a:	f000 feb4 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_PORT, GREEN_2_PIN, SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	4835      	ldr	r0, [pc, #212]	; (800077c <mode_1+0x1a0>)
 80006a6:	f000 feae 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_1_PORT, RED_1_PIN, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	4833      	ldr	r0, [pc, #204]	; (800077c <mode_1+0x1a0>)
 80006b0:	f000 fea9 	bl	8001406 <HAL_GPIO_WritePin>
			if(time_1 <= 0 || time_2 <= 0){
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <mode_1+0x1a4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dd03      	ble.n	80006c4 <mode_1+0xe8>
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <mode_1+0x1b0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dc31      	bgt.n	8000728 <mode_1+0x14c>
				trafficstate = YELLOW_2;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <mode_1+0x19c>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	701a      	strb	r2, [r3, #0]
				time_2 = red_counter-green_counter;
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <mode_1+0x1a8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <mode_1+0x1ac>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <mode_1+0x1b0>)
 80006d8:	6013      	str	r3, [r2, #0]
			}
			break;
 80006da:	e025      	b.n	8000728 <mode_1+0x14c>
		case YELLOW_2:
			HAL_GPIO_WritePin(GREEN_2_PORT, GREEN_2_PIN, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e2:	4826      	ldr	r0, [pc, #152]	; (800077c <mode_1+0x1a0>)
 80006e4:	f000 fe8f 	bl	8001406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_PORT, YELLOW_2_PIN, SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ee:	4823      	ldr	r0, [pc, #140]	; (800077c <mode_1+0x1a0>)
 80006f0:	f000 fe89 	bl	8001406 <HAL_GPIO_WritePin>
			if(time_1 <= 0 || time_2 <= 0){
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <mode_1+0x1a4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd03      	ble.n	8000704 <mode_1+0x128>
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <mode_1+0x1b0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	dc13      	bgt.n	800072c <mode_1+0x150>
				trafficstate = GREEN_1;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <mode_1+0x19c>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
				time_1 = green_counter;
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <mode_1+0x1ac>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <mode_1+0x1a4>)
 8000712:	601a      	str	r2, [r3, #0]
				time_2 = red_counter;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <mode_1+0x1a8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <mode_1+0x1b0>)
 800071c:	601a      	str	r2, [r3, #0]
			}
			break;
 800071e:	e005      	b.n	800072c <mode_1+0x150>
			break;
 8000720:	bf00      	nop
 8000722:	e004      	b.n	800072e <mode_1+0x152>
			break;
 8000724:	bf00      	nop
 8000726:	e002      	b.n	800072e <mode_1+0x152>
			break;
 8000728:	bf00      	nop
 800072a:	e000      	b.n	800072e <mode_1+0x152>
			break;
 800072c:	bf00      	nop
	}

	control7SEG(led7state, time_1, time_2);
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <mode_1+0x1b4>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <mode_1+0x1a4>)
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	b2d1      	uxtb	r1, r2
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <mode_1+0x1b0>)
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fda4 	bl	800028c <control7SEG>
	led7state++;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <mode_1+0x1b4>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <mode_1+0x1b4>)
 800074e:	701a      	strb	r2, [r3, #0]
	if(led7state > 3){
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <mode_1+0x1b4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d90c      	bls.n	8000772 <mode_1+0x196>
		led7state = 0;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <mode_1+0x1b4>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
		time_1--;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <mode_1+0x1a4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <mode_1+0x1a4>)
 8000766:	6013      	str	r3, [r2, #0]
		time_2--;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <mode_1+0x1b0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <mode_1+0x1b0>)
 8000770:	6013      	str	r3, [r2, #0]
	}
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000f4 	.word	0x200000f4
 800077c:	40010800 	.word	0x40010800
 8000780:	200000f8 	.word	0x200000f8
 8000784:	2000001e 	.word	0x2000001e
 8000788:	2000001f 	.word	0x2000001f
 800078c:	200000fc 	.word	0x200000fc
 8000790:	20000100 	.word	0x20000100

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fa7f 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f831 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 f8b7 	bl	8000914 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007a6:	f000 f869 	bl	800087c <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <main+0x48>)
 80007ac:	f001 fa72 	bl	8001c94 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  SCH_Add_Task(mode_1, 25, 25);
 80007b0:	2219      	movs	r2, #25
 80007b2:	2119      	movs	r1, #25
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <main+0x4c>)
 80007b6:	f000 f913 	bl	80009e0 <SCH_Add_Task>
  char str[] = "Start USART!! \r\n";
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <main+0x50>)
 80007bc:	1d3c      	adds	r4, r7, #4
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	682b      	ldr	r3, [r5, #0]
 80007c6:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, str, sizeof(str), 1000);
 80007c8:	1d39      	adds	r1, r7, #4
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	2211      	movs	r2, #17
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <main+0x54>)
 80007d2:	f001 fdf7 	bl	80023c4 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80007d6:	f000 f949 	bl	8000a6c <SCH_Dispatch_Tasks>
 80007da:	e7fc      	b.n	80007d6 <main+0x42>
 80007dc:	20000104 	.word	0x20000104
 80007e0:	080005dd 	.word	0x080005dd
 80007e4:	080030e0 	.word	0x080030e0
 80007e8:	2000014c 	.word	0x2000014c

080007ec <HAL_TIM_PeriodElapsedCallback>:

void LED_Blink2(){
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80007f4:	f000 f91c 	bl	8000a30 <SCH_Update>
	getKeyInput();
 80007f8:	f7ff fe60 	bl	80004bc <getKeyInput>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b090      	sub	sp, #64	; 0x40
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2228      	movs	r2, #40	; 0x28
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fb56 	bl	8002ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fdfc 	bl	8001438 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000846:	f000 f8c5 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f86a 	bl	800193c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800086e:	f000 f8b1 	bl	80009d4 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3740      	adds	r7, #64	; 0x40
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_TIM2_Init+0x94>)
 800089a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_TIM2_Init+0x94>)
 80008a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_TIM2_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_TIM2_Init+0x94>)
 80008b0:	2209      	movs	r2, #9
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_TIM2_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_TIM2_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4813      	ldr	r0, [pc, #76]	; (8000910 <MX_TIM2_Init+0x94>)
 80008c2:	f001 f997 	bl	8001bf4 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008cc:	f000 f882 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_TIM2_Init+0x94>)
 80008de:	f001 fb2d 	bl	8001f3c <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e8:	f000 f874 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_TIM2_Init+0x94>)
 80008fa:	f001 fcf9 	bl	80022f0 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f866 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000104 	.word	0x20000104

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_GPIO_Init+0xb4>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <MX_GPIO_Init+0xb4>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xb4>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xb4>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <MX_GPIO_Init+0xb4>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_GPIO_Init+0xb4>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000958:	2200      	movs	r2, #0
 800095a:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <MX_GPIO_Init+0xb8>)
 8000960:	f000 fd51 	bl	8001406 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000964:	2200      	movs	r2, #0
 8000966:	217f      	movs	r1, #127	; 0x7f
 8000968:	4819      	ldr	r0, [pc, #100]	; (80009d0 <MX_GPIO_Init+0xbc>)
 800096a:	f000 fd4c 	bl	8001406 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800096e:	230e      	movs	r3, #14
 8000970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <MX_GPIO_Init+0xb8>)
 8000982:	f000 fbad 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000986:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800098a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	4619      	mov	r1, r3
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0xb8>)
 80009a0:	f000 fb9e 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a4:	237f      	movs	r3, #127	; 0x7f
 80009a6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0xbc>)
 80009bc:	f000 fb90 	bl	80010e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010800 	.word	0x40010800
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <SCH_Add_Task>:
	clearList(head);
	head = NULL;
	amount = 0;
};

void SCH_Add_Task(CALLBACK callback, uint16_t Delay, uint16_t Period){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	807b      	strh	r3, [r7, #2]
 80009ec:	4613      	mov	r3, r2
 80009ee:	803b      	strh	r3, [r7, #0]
	Task_TypeDef_t data;
	data.callback = callback;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60bb      	str	r3, [r7, #8]
	data.Delay = Delay;
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	81bb      	strh	r3, [r7, #12]
	data.Period = Period;
 80009f8:	883b      	ldrh	r3, [r7, #0]
 80009fa:	81fb      	strh	r3, [r7, #14]
	data.Runme = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	743b      	strb	r3, [r7, #16]
	data.taskID = amount++;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <SCH_Add_Task+0x48>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	b2d1      	uxtb	r1, r2
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <SCH_Add_Task+0x48>)
 8000a0a:	7011      	strb	r1, [r2, #0]
 8000a0c:	617b      	str	r3, [r7, #20]
	addTask(&head, data);
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <SCH_Add_Task+0x4c>)
 8000a1a:	f7ff fcc5 	bl	80003a8 <addTask>
};
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000194 	.word	0x20000194
 8000a2c:	20000198 	.word	0x20000198

08000a30 <SCH_Update>:

void SCH_Go_to_Sleep(){

};

void SCH_Update(){
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	if(head == NULL) return;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <SCH_Update+0x38>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d010      	beq.n	8000a5e <SCH_Update+0x2e>
	if(head->data.Delay <= 0){
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <SCH_Update+0x38>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d104      	bne.n	8000a50 <SCH_Update+0x20>
		head->data.Runme = 1;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <SCH_Update+0x38>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	721a      	strb	r2, [r3, #8]
 8000a4e:	e007      	b.n	8000a60 <SCH_Update+0x30>
	}else{
		head->data.Delay--;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SCH_Update+0x38>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	889a      	ldrh	r2, [r3, #4]
 8000a56:	3a01      	subs	r2, #1
 8000a58:	b292      	uxth	r2, r2
 8000a5a:	809a      	strh	r2, [r3, #4]
 8000a5c:	e000      	b.n	8000a60 <SCH_Update+0x30>
	if(head == NULL) return;
 8000a5e:	bf00      	nop
	}
};
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000198 	.word	0x20000198

08000a6c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
	if(head == NULL) return;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d025      	beq.n	8000ac6 <SCH_Dispatch_Tasks+0x5a>
	if(head->data.Runme == 1){
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	7a1b      	ldrb	r3, [r3, #8]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d121      	bne.n	8000ac8 <SCH_Dispatch_Tasks+0x5c>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		(*head->data.callback)();
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4798      	blx	r3
		Task_TypeDef_t reNewTask;
		reNewTask.Delay = head->data.Period;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	88db      	ldrh	r3, [r3, #6]
 8000a92:	80bb      	strh	r3, [r7, #4]
		reNewTask.Period = head->data.Period;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	88db      	ldrh	r3, [r3, #6]
 8000a9a:	80fb      	strh	r3, [r7, #6]
		reNewTask.Runme = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	723b      	strb	r3, [r7, #8]
		reNewTask.callback = head->data.callback;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	603b      	str	r3, [r7, #0]
		reNewTask.taskID = head->data.taskID;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	60fb      	str	r3, [r7, #12]
		deleteTask(&head);
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000ab2:	f7ff fcdc 	bl	800046e <deleteTask>
		addTask(&head, reNewTask);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	463b      	mov	r3, r7
 8000abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <SCH_Dispatch_Tasks+0x64>)
 8000ac0:	f7ff fc72 	bl	80003a8 <addTask>
 8000ac4:	e000      	b.n	8000ac8 <SCH_Dispatch_Tasks+0x5c>
	if(head == NULL) return;
 8000ac6:	bf00      	nop
	}

};
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000198 	.word	0x20000198

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_MspInit+0x40>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_MspInit+0x40>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_MspInit+0x40>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_MspInit+0x40>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_MspInit+0x40>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_MspInit+0x40>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d113      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_TIM_Base_MspInit+0x44>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_TIM_Base_MspInit+0x44>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_TIM_Base_MspInit+0x44>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	201c      	movs	r0, #28
 8000b48:	f000 f9e1 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b4c:	201c      	movs	r0, #28
 8000b4e:	f000 f9fa 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f8bf 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM2_IRQHandler+0x10>)
 8000bb6:	f001 f8b9 	bl	8001d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000104 	.word	0x20000104

08000bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART2_IRQHandler+0x10>)
 8000bca:	f001 fc7f 	bl	80024cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000014c 	.word	0x2000014c

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f002 f922 	bl	8002e50 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20002800 	.word	0x20002800
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000019c 	.word	0x2000019c
 8000c40:	200001b8 	.word	0x200001b8

08000c44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff fff8 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c56:	490c      	ldr	r1, [pc, #48]	; (8000c88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c6c:	4c09      	ldr	r4, [pc, #36]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f002 f8ef 	bl	8002e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7e:	f7ff fd89 	bl	8000794 <main>
  bx lr
 8000c82:	4770      	bx	lr
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c8c:	08003120 	.word	0x08003120
  ldr r2, =_sbss
 8000c90:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c94:	200001b4 	.word	0x200001b4

08000c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_2_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x28>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x28>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f923 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff ff0c 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40022000 	.word	0x40022000

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f93b 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f903 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000020 	.word	0x20000020
 8000d20:	20000028 	.word	0x20000028
 8000d24:	20000024 	.word	0x20000024

08000d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_IncTick+0x1c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_IncTick+0x20>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <HAL_IncTick+0x20>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	20000028 	.word	0x20000028
 8000d48:	200001a0 	.word	0x200001a0

08000d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <HAL_GetTick+0x10>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	200001a0 	.word	0x200001a0

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4906      	ldr	r1, [pc, #24]	; (8000df8 <__NVIC_EnableIRQ+0x34>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff90 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff2d 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff42 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff35 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d008      	beq.n	8000fa4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2204      	movs	r2, #4
 8000f96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e020      	b.n	8000fe6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 020e 	bic.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d005      	beq.n	8001014 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2204      	movs	r2, #4
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e051      	b.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 020e 	bic.w	r2, r2, #14
 8001022:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <HAL_DMA_Abort_IT+0xd4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d029      	beq.n	8001092 <HAL_DMA_Abort_IT+0xa2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_DMA_Abort_IT+0xd8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d022      	beq.n	800108e <HAL_DMA_Abort_IT+0x9e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_DMA_Abort_IT+0xdc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01a      	beq.n	8001088 <HAL_DMA_Abort_IT+0x98>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_DMA_Abort_IT+0xe0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d012      	beq.n	8001082 <HAL_DMA_Abort_IT+0x92>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <HAL_DMA_Abort_IT+0xe4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00a      	beq.n	800107c <HAL_DMA_Abort_IT+0x8c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <HAL_DMA_Abort_IT+0xe8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d102      	bne.n	8001076 <HAL_DMA_Abort_IT+0x86>
 8001070:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001074:	e00e      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800107a:	e00b      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	e008      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	e005      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108c:	e002      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 800108e:	2310      	movs	r3, #16
 8001090:	e000      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001092:	2301      	movs	r3, #1
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_DMA_Abort_IT+0xec>)
 8001096:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	4798      	blx	r3
    } 
  }
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020008 	.word	0x40020008
 80010c8:	4002001c 	.word	0x4002001c
 80010cc:	40020030 	.word	0x40020030
 80010d0:	40020044 	.word	0x40020044
 80010d4:	40020058 	.word	0x40020058
 80010d8:	4002006c 	.word	0x4002006c
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	e161      	b.n	80013b8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f4:	2201      	movs	r2, #1
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8150 	bne.w	80013b2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a97      	ldr	r2, [pc, #604]	; (8001374 <HAL_GPIO_Init+0x294>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d05e      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800111c:	4a95      	ldr	r2, [pc, #596]	; (8001374 <HAL_GPIO_Init+0x294>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d875      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001122:	4a95      	ldr	r2, [pc, #596]	; (8001378 <HAL_GPIO_Init+0x298>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d058      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001128:	4a93      	ldr	r2, [pc, #588]	; (8001378 <HAL_GPIO_Init+0x298>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d86f      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800112e:	4a93      	ldr	r2, [pc, #588]	; (800137c <HAL_GPIO_Init+0x29c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d052      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001134:	4a91      	ldr	r2, [pc, #580]	; (800137c <HAL_GPIO_Init+0x29c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d869      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800113a:	4a91      	ldr	r2, [pc, #580]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d04c      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001140:	4a8f      	ldr	r2, [pc, #572]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d863      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001146:	4a8f      	ldr	r2, [pc, #572]	; (8001384 <HAL_GPIO_Init+0x2a4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d046      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800114c:	4a8d      	ldr	r2, [pc, #564]	; (8001384 <HAL_GPIO_Init+0x2a4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d85d      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001152:	2b12      	cmp	r3, #18
 8001154:	d82a      	bhi.n	80011ac <HAL_GPIO_Init+0xcc>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d859      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <HAL_GPIO_Init+0x80>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	080011db 	.word	0x080011db
 8001164:	080011b5 	.word	0x080011b5
 8001168:	080011c7 	.word	0x080011c7
 800116c:	08001209 	.word	0x08001209
 8001170:	0800120f 	.word	0x0800120f
 8001174:	0800120f 	.word	0x0800120f
 8001178:	0800120f 	.word	0x0800120f
 800117c:	0800120f 	.word	0x0800120f
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800120f 	.word	0x0800120f
 8001188:	0800120f 	.word	0x0800120f
 800118c:	0800120f 	.word	0x0800120f
 8001190:	0800120f 	.word	0x0800120f
 8001194:	0800120f 	.word	0x0800120f
 8001198:	0800120f 	.word	0x0800120f
 800119c:	0800120f 	.word	0x0800120f
 80011a0:	0800120f 	.word	0x0800120f
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011d1 	.word	0x080011d1
 80011ac:	4a76      	ldr	r2, [pc, #472]	; (8001388 <HAL_GPIO_Init+0x2a8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b2:	e02c      	b.n	800120e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e029      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e024      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	3308      	adds	r3, #8
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e01f      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	330c      	adds	r3, #12
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e01a      	b.n	8001210 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e2:	2304      	movs	r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e013      	b.n	8001210 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	611a      	str	r2, [r3, #16]
          break;
 80011fa:	e009      	b.n	8001210 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	615a      	str	r2, [r3, #20]
          break;
 8001206:	e003      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x130>
          break;
 800120e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d801      	bhi.n	800121a <HAL_GPIO_Init+0x13a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	e001      	b.n	800121e <HAL_GPIO_Init+0x13e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d802      	bhi.n	800122c <HAL_GPIO_Init+0x14c>
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x152>
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	3b08      	subs	r3, #8
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	210f      	movs	r1, #15
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	6a39      	ldr	r1, [r7, #32]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80a9 	beq.w	80013b2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <HAL_GPIO_Init+0x2ac>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_GPIO_Init+0x2ac>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_GPIO_Init+0x2ac>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_GPIO_Init+0x2b0>)
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <HAL_GPIO_Init+0x2b4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3c      	ldr	r2, [pc, #240]	; (8001398 <HAL_GPIO_Init+0x2b8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1dc>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3b      	ldr	r2, [pc, #236]	; (800139c <HAL_GPIO_Init+0x2bc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1d8>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e004      	b.n	80012c2 <HAL_GPIO_Init+0x1e2>
 80012b8:	2303      	movs	r3, #3
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x1e2>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <HAL_GPIO_Init+0x1e2>
 80012c0:	2300      	movs	r3, #0
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	f002 0203 	and.w	r2, r2, #3
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	4093      	lsls	r3, r2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d2:	492f      	ldr	r1, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x2b0>)
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	492b      	ldr	r1, [pc, #172]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001304:	4013      	ands	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	4921      	ldr	r1, [pc, #132]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	60cb      	str	r3, [r1, #12]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	491d      	ldr	r1, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800132c:	4013      	ands	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4917      	ldr	r1, [pc, #92]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4913      	ldr	r1, [pc, #76]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001354:	4013      	ands	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d01f      	beq.n	80013a4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	490d      	ldr	r1, [pc, #52]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
 8001370:	e01f      	b.n	80013b2 <HAL_GPIO_Init+0x2d2>
 8001372:	bf00      	nop
 8001374:	10320000 	.word	0x10320000
 8001378:	10310000 	.word	0x10310000
 800137c:	10220000 	.word	0x10220000
 8001380:	10210000 	.word	0x10210000
 8001384:	10120000 	.word	0x10120000
 8001388:	10110000 	.word	0x10110000
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000
 8001394:	40010800 	.word	0x40010800
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40011000 	.word	0x40011000
 80013a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	4909      	ldr	r1, [pc, #36]	; (80013d4 <HAL_GPIO_Init+0x2f4>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	3301      	adds	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f47f ae96 	bne.w	80010f4 <HAL_GPIO_Init+0x14>
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	372c      	adds	r7, #44	; 0x2c
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e001      	b.n	80013fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	807b      	strh	r3, [r7, #2]
 8001412:	4613      	mov	r3, r2
 8001414:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001416:	787b      	ldrb	r3, [r7, #1]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141c:	887a      	ldrh	r2, [r7, #2]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001422:	e003      	b.n	800142c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	041a      	lsls	r2, r3, #16
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	611a      	str	r2, [r3, #16]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
	...

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e272      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8087 	beq.w	8001566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001458:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b04      	cmp	r3, #4
 8001462:	d00c      	beq.n	800147e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001464:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d112      	bne.n	8001496 <HAL_RCC_OscConfig+0x5e>
 8001470:	4b8c      	ldr	r3, [pc, #560]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d10b      	bne.n	8001496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147e:	4b89      	ldr	r3, [pc, #548]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <HAL_RCC_OscConfig+0x12c>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d168      	bne.n	8001564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e24c      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x76>
 80014a0:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a7f      	ldr	r2, [pc, #508]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e02e      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b7b      	ldr	r3, [pc, #492]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7a      	ldr	r2, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b78      	ldr	r3, [pc, #480]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a77      	ldr	r2, [pc, #476]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01d      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0xbc>
 80014da:	4b72      	ldr	r3, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a71      	ldr	r2, [pc, #452]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014f4:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a6a      	ldr	r2, [pc, #424]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a67      	ldr	r2, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc1a 	bl	8000d4c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc16 	bl	8000d4c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e200      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xe4>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc06 	bl	8000d4c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fc02 	bl	8000d4c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1ec      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x10c>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d063      	beq.n	800163a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x18c>
 800158a:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x176>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1c0      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4939      	ldr	r1, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	e03a      	b.n	800163a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fbbb 	bl	8000d4c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fbb7 	bl	8000d4c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1a1      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4927      	ldr	r1, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e015      	b.n	800163a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb9a 	bl	8000d4c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fb96 	bl	8000d4c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e180      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d03a      	beq.n	80016bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d019      	beq.n	8001682 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_RCC_OscConfig+0x274>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff fb7a 	bl	8000d4c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff fb76 	bl	8000d4c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e160      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_RCC_OscConfig+0x26c>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800167a:	2001      	movs	r0, #1
 800167c:	f000 fa9c 	bl	8001bb8 <RCC_Delay>
 8001680:	e01c      	b.n	80016bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_RCC_OscConfig+0x274>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff fb60 	bl	8000d4c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168e:	e00f      	b.n	80016b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fb5c 	bl	8000d4c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d908      	bls.n	80016b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e146      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	42420000 	.word	0x42420000
 80016ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e9      	bne.n	8001690 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a6 	beq.w	8001816 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10d      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a87      	ldr	r2, [pc, #540]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b85      	ldr	r3, [pc, #532]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b82      	ldr	r3, [pc, #520]	; (8001900 <HAL_RCC_OscConfig+0x4c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x4c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7e      	ldr	r2, [pc, #504]	; (8001900 <HAL_RCC_OscConfig+0x4c8>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff fb1d 	bl	8000d4c <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff fb19 	bl	8000d4c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e103      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b75      	ldr	r3, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x4c8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x312>
 800173c:	4b6f      	ldr	r3, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a6e      	ldr	r2, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e02d      	b.n	80017a6 <HAL_RCC_OscConfig+0x36e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x334>
 8001752:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a69      	ldr	r2, [pc, #420]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b67      	ldr	r3, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a66      	ldr	r2, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	e01c      	b.n	80017a6 <HAL_RCC_OscConfig+0x36e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x356>
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a60      	ldr	r2, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	e00b      	b.n	80017a6 <HAL_RCC_OscConfig+0x36e>
 800178e:	4b5b      	ldr	r3, [pc, #364]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a5a      	ldr	r2, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a57      	ldr	r2, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d015      	beq.n	80017da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff facd 	bl	8000d4c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff fac9 	bl	8000d4c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0b1      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ee      	beq.n	80017b6 <HAL_RCC_OscConfig+0x37e>
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff fab7 	bl	8000d4c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fab3 	bl	8000d4c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e09b      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ee      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8087 	beq.w	800192e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d061      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d146      	bne.n	80018c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <HAL_RCC_OscConfig+0x4cc>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fa87 	bl	8000d4c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fa83 	bl	8000d4c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e06d      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001868:	d108      	bne.n	800187c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4921      	ldr	r1, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a19      	ldr	r1, [r3, #32]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	430b      	orrs	r3, r1
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x4cc>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fa57 	bl	8000d4c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff fa53 	bl	8000d4c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e03d      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x46a>
 80018c0:	e035      	b.n	800192e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_RCC_OscConfig+0x4cc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa40 	bl	8000d4c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff fa3c 	bl	8000d4c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e026      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x498>
 80018ee:	e01e      	b.n	800192e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e019      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
 80018fc:	40021000 	.word	0x40021000
 8001900:	40007000 	.word	0x40007000
 8001904:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x500>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d0      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	4965      	ldr	r1, [pc, #404]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d040      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e073      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06b      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4936      	ldr	r1, [pc, #216]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f98e 	bl	8000d4c <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff f98a 	bl	8000d4c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e053      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d210      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 0207 	bic.w	r2, r3, #7
 8001a72:	4922      	ldr	r1, [pc, #136]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f8ec 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	080030f4 	.word	0x080030f4
 8001b08:	20000020 	.word	0x20000020
 8001b0c:	20000024 	.word	0x20000024

08001b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x30>
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x36>
 8001b3e:	e027      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b42:	613b      	str	r3, [r7, #16]
      break;
 8001b44:	e027      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d010      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	0c5b      	lsrs	r3, r3, #17
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b72:	fb03 f202 	mul.w	r2, r3, r2
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e004      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	613b      	str	r3, [r7, #16]
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b92:	613b      	str	r3, [r7, #16]
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	693b      	ldr	r3, [r7, #16]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	007a1200 	.word	0x007a1200
 8001bac:	08003104 	.word	0x08003104
 8001bb0:	08003114 	.word	0x08003114
 8001bb4:	003d0900 	.word	0x003d0900

08001bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <RCC_Delay+0x34>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <RCC_Delay+0x38>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0a5b      	lsrs	r3, r3, #9
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bd4:	bf00      	nop
  }
  while (Delay --);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <RCC_Delay+0x1c>
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000020 	.word	0x20000020
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe ff7c 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 fa6e 	bl	8002114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d001      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e035      	b.n	8001d18 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_TIM_Base_Start_IT+0x90>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d009      	beq.n	8001ce2 <HAL_TIM_Base_Start_IT+0x4e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd6:	d004      	beq.n	8001ce2 <HAL_TIM_Base_Start_IT+0x4e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <HAL_TIM_Base_Start_IT+0x94>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d111      	bne.n	8001d06 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d010      	beq.n	8001d16 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d04:	e007      	b.n	8001d16 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40000400 	.word	0x40000400

08001d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0202 	mvn.w	r2, #2
 8001d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f9b4 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f9a7 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f9b6 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0204 	mvn.w	r2, #4
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f98a 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f97d 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f98c 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f960 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f953 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f962 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0210 	mvn.w	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f936 	bl	80020dc <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f929 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f938 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0201 	mvn.w	r2, #1
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fc9e 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b80      	cmp	r3, #128	; 0x80
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa6b 	bl	80023b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8fc 	bl	8002100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0220 	mvn.w	r2, #32
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fa36 	bl	80023a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_TIM_ConfigClockSource+0x1c>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0b4      	b.n	80020c2 <HAL_TIM_ConfigClockSource+0x186>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f90:	d03e      	beq.n	8002010 <HAL_TIM_ConfigClockSource+0xd4>
 8001f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f96:	f200 8087 	bhi.w	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9e:	f000 8086 	beq.w	80020ae <HAL_TIM_ConfigClockSource+0x172>
 8001fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa6:	d87f      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa8:	2b70      	cmp	r3, #112	; 0x70
 8001faa:	d01a      	beq.n	8001fe2 <HAL_TIM_ConfigClockSource+0xa6>
 8001fac:	2b70      	cmp	r3, #112	; 0x70
 8001fae:	d87b      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb0:	2b60      	cmp	r3, #96	; 0x60
 8001fb2:	d050      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x11a>
 8001fb4:	2b60      	cmp	r3, #96	; 0x60
 8001fb6:	d877      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb8:	2b50      	cmp	r3, #80	; 0x50
 8001fba:	d03c      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0xfa>
 8001fbc:	2b50      	cmp	r3, #80	; 0x50
 8001fbe:	d873      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d058      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x13a>
 8001fc4:	2b40      	cmp	r3, #64	; 0x40
 8001fc6:	d86f      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc8:	2b30      	cmp	r3, #48	; 0x30
 8001fca:	d064      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	2b30      	cmp	r3, #48	; 0x30
 8001fce:	d86b      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d060      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d867      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05c      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d05a      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fe0:	e062      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f000 f95e 	bl	80022b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	609a      	str	r2, [r3, #8]
      break;
 800200e:	e04f      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f000 f947 	bl	80022b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002032:	609a      	str	r2, [r3, #8]
      break;
 8002034:	e03c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	461a      	mov	r2, r3
 8002044:	f000 f8be 	bl	80021c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2150      	movs	r1, #80	; 0x50
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f915 	bl	800227e <TIM_ITRx_SetConfig>
      break;
 8002054:	e02c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	461a      	mov	r2, r3
 8002064:	f000 f8dc 	bl	8002220 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2160      	movs	r1, #96	; 0x60
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f905 	bl	800227e <TIM_ITRx_SetConfig>
      break;
 8002074:	e01c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	461a      	mov	r2, r3
 8002084:	f000 f89e 	bl	80021c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2140      	movs	r1, #64	; 0x40
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f8f5 	bl	800227e <TIM_ITRx_SetConfig>
      break;
 8002094:	e00c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f000 f8ec 	bl	800227e <TIM_ITRx_SetConfig>
      break;
 80020a6:	e003      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      break;
 80020ac:	e000      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <TIM_Base_SetConfig+0xa8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <TIM_Base_SetConfig+0x28>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002132:	d003      	beq.n	800213c <TIM_Base_SetConfig+0x28>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <TIM_Base_SetConfig+0xac>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d108      	bne.n	800214e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <TIM_Base_SetConfig+0xa8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <TIM_Base_SetConfig+0x52>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d003      	beq.n	8002166 <TIM_Base_SetConfig+0x52>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <TIM_Base_SetConfig+0xac>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d108      	bne.n	8002178 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a07      	ldr	r2, [pc, #28]	; (80021bc <TIM_Base_SetConfig+0xa8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d103      	bne.n	80021ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	615a      	str	r2, [r3, #20]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400

080021c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f023 0201 	bic.w	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f023 030a 	bic.w	r3, r3, #10
 8002200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	621a      	str	r2, [r3, #32]
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f023 0210 	bic.w	r2, r3, #16
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800224a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	031b      	lsls	r3, r3, #12
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800225c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	621a      	str	r2, [r3, #32]
}
 8002274:	bf00      	nop
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	f043 0307 	orr.w	r3, r3, #7
 80022a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	609a      	str	r2, [r3, #8]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b087      	sub	sp, #28
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	021a      	lsls	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4313      	orrs	r3, r2
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	609a      	str	r2, [r3, #8]
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002304:	2302      	movs	r3, #2
 8002306:	e041      	b.n	800238c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d004      	beq.n	8002360 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10c      	bne.n	800237a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4313      	orrs	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40000400 	.word	0x40000400

080023a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d16d      	bne.n	80024c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_UART_Transmit+0x2c>
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e066      	b.n	80024c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2221      	movs	r2, #33	; 0x21
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002402:	f7fe fca3 	bl	8000d4c <HAL_GetTick>
 8002406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241c:	d108      	bne.n	8002430 <HAL_UART_Transmit+0x6c>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	e003      	b.n	8002438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002438:	e02a      	b.n	8002490 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 faf9 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e036      	b.n	80024c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	3302      	adds	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e007      	b.n	8002482 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1cf      	bne.n	800243a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2140      	movs	r1, #64	; 0x40
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fac9 	bl	8002a3c <UART_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e006      	b.n	80024c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0ba      	sub	sp, #232	; 0xe8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800250a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_UART_IRQHandler+0x66>
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fbd1 	bl	8002cd2 <UART_Receive_IT>
      return;
 8002530:	e25b      	b.n	80029ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80de 	beq.w	80026f8 <HAL_UART_IRQHandler+0x22c>
 800253c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800254c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80d1 	beq.w	80026f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_UART_IRQHandler+0xae>
 8002562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0xd2>
 8002586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_UART_IRQHandler+0xf6>
 80025aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f043 0204 	orr.w	r2, r3, #4
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d011      	beq.n	80025f2 <HAL_UART_IRQHandler+0x126>
 80025ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f043 0208 	orr.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 81f2 	beq.w	80029e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_UART_IRQHandler+0x14e>
 8002608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fb5c 	bl	8002cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_UART_IRQHandler+0x17a>
 800263e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04f      	beq.n	80026e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa66 	bl	8002b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d041      	beq.n	80026de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3314      	adds	r3, #20
 8002660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3314      	adds	r3, #20
 8002682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800268a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800269e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1d9      	bne.n	800265a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <HAL_UART_IRQHandler+0x3e0>)
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fc98 	bl	8000ff0 <HAL_DMA_Abort_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026d0:	4610      	mov	r0, r2
 80026d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e00e      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f99c 	bl	8002a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e00a      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f998 	bl	8002a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	e006      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f994 	bl	8002a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026f2:	e175      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	bf00      	nop
    return;
 80026f6:	e173      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 814f 	bne.w	80029a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8148 	beq.w	80029a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8141 	beq.w	80029a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80b6 	beq.w	80028b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8145 	beq.w	80029e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800275e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002762:	429a      	cmp	r2, r3
 8002764:	f080 813e 	bcs.w	80029e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b20      	cmp	r3, #32
 8002778:	f000 8088 	beq.w	800288c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800278a:	e853 3f00 	ldrex	r3, [r3]
 800278e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800279a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027b8:	e841 2300 	strex	r3, r2, [r1]
 80027bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1d9      	bne.n	800277c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3314      	adds	r3, #20
 80027e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027f8:	e841 2300 	strex	r3, r2, [r1]
 80027fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e1      	bne.n	80027c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3314      	adds	r3, #20
 800280a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280e:	e853 3f00 	ldrex	r3, [r3]
 8002812:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800281a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002828:	66fa      	str	r2, [r7, #108]	; 0x6c
 800282a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800282e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002830:	e841 2300 	strex	r3, r2, [r1]
 8002834:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e3      	bne.n	8002804 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800285a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285c:	f023 0310 	bic.w	r3, r3, #16
 8002860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800286e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e3      	bne.n	800284a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fb77 	bl	8000f7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800289a:	b29b      	uxth	r3, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8bf 	bl	8002a26 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a8:	e09c      	b.n	80029e4 <HAL_UART_IRQHandler+0x518>
 80028aa:	bf00      	nop
 80028ac:	08002bdd 	.word	0x08002bdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808e 	beq.w	80029e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8089 	beq.w	80029e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028fa:	647a      	str	r2, [r7, #68]	; 0x44
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e3      	bne.n	80028d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3314      	adds	r3, #20
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	623b      	str	r3, [r7, #32]
   return(result);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3314      	adds	r3, #20
 800292e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002932:	633a      	str	r2, [r7, #48]	; 0x30
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e3      	bne.n	800290e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	60fb      	str	r3, [r7, #12]
   return(result);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0310 	bic.w	r3, r3, #16
 800296a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	617b      	str	r3, [r7, #20]
   return(result);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e3      	bne.n	8002954 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002992:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f844 	bl	8002a26 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800299e:	e023      	b.n	80029e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <HAL_UART_IRQHandler+0x4f4>
 80029ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f923 	bl	8002c04 <UART_Transmit_IT>
    return;
 80029be:	e014      	b.n	80029ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <HAL_UART_IRQHandler+0x51e>
 80029cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f962 	bl	8002ca2 <UART_EndTransmit_IT>
    return;
 80029de:	e004      	b.n	80029ea <HAL_UART_IRQHandler+0x51e>
    return;
 80029e0:	bf00      	nop
 80029e2:	e002      	b.n	80029ea <HAL_UART_IRQHandler+0x51e>
      return;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <HAL_UART_IRQHandler+0x51e>
      return;
 80029e8:	bf00      	nop
  }
}
 80029ea:	37e8      	adds	r7, #232	; 0xe8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b090      	sub	sp, #64	; 0x40
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4c:	e050      	b.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d04c      	beq.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a5c:	f7fe f976 	bl	8000d4c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d241      	bcs.n	8002af0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a8c:	637a      	str	r2, [r7, #52]	; 0x34
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e5      	bne.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3314      	adds	r3, #20
 8002abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac0:	623a      	str	r2, [r7, #32]
 8002ac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	69f9      	ldr	r1, [r7, #28]
 8002ac6:	6a3a      	ldr	r2, [r7, #32]
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e5      	bne.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e00f      	b.n	8002b10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d09f      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3740      	adds	r7, #64	; 0x40
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b095      	sub	sp, #84	; 0x54
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b40:	643a      	str	r2, [r7, #64]	; 0x40
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e5      	bne.n	8002b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3314      	adds	r3, #20
 8002b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	e853 3f00 	ldrex	r3, [r3]
 8002b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3314      	adds	r3, #20
 8002b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7c:	e841 2300 	strex	r3, r2, [r1]
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e5      	bne.n	8002b54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d119      	bne.n	8002bc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f023 0310 	bic.w	r3, r3, #16
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bb0:	61ba      	str	r2, [r7, #24]
 8002bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	6979      	ldr	r1, [r7, #20]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e5      	bne.n	8002b90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bd2:	bf00      	nop
 8002bd4:	3754      	adds	r7, #84	; 0x54
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff ff0c 	bl	8002a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b21      	cmp	r3, #33	; 0x21
 8002c16:	d13e      	bne.n	8002c96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d114      	bne.n	8002c4c <UART_Transmit_IT+0x48>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d110      	bne.n	8002c4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	1c9a      	adds	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]
 8002c4a:	e008      	b.n	8002c5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	1c59      	adds	r1, r3, #1
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6211      	str	r1, [r2, #32]
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10f      	bne.n	8002c92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fe94 	bl	80029f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b08c      	sub	sp, #48	; 0x30
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b22      	cmp	r3, #34	; 0x22
 8002ce4:	f040 80ae 	bne.w	8002e44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf0:	d117      	bne.n	8002d22 <UART_Receive_IT+0x50>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d113      	bne.n	8002d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	1c9a      	adds	r2, r3, #2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d20:	e026      	b.n	8002d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d34:	d007      	beq.n	8002d46 <UART_Receive_IT+0x74>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <UART_Receive_IT+0x82>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e008      	b.n	8002d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d15d      	bne.n	8002e40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0220 	bic.w	r2, r2, #32
 8002d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d135      	bne.n	8002e36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	613b      	str	r3, [r7, #16]
   return(result);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f023 0310 	bic.w	r3, r3, #16
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	623a      	str	r2, [r7, #32]
 8002df2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	69f9      	ldr	r1, [r7, #28]
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e5      	bne.n	8002dd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d10a      	bne.n	8002e28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fdf9 	bl	8002a26 <HAL_UARTEx_RxEventCallback>
 8002e34:	e002      	b.n	8002e3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fde3 	bl	8002a02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e002      	b.n	8002e46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3730      	adds	r7, #48	; 0x30
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <__errno>:
 8002e50:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <__errno+0x8>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	2000002c 	.word	0x2000002c

08002e5c <__libc_init_array>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	2600      	movs	r6, #0
 8002e60:	4d0c      	ldr	r5, [pc, #48]	; (8002e94 <__libc_init_array+0x38>)
 8002e62:	4c0d      	ldr	r4, [pc, #52]	; (8002e98 <__libc_init_array+0x3c>)
 8002e64:	1b64      	subs	r4, r4, r5
 8002e66:	10a4      	asrs	r4, r4, #2
 8002e68:	42a6      	cmp	r6, r4
 8002e6a:	d109      	bne.n	8002e80 <__libc_init_array+0x24>
 8002e6c:	f000 f92c 	bl	80030c8 <_init>
 8002e70:	2600      	movs	r6, #0
 8002e72:	4d0a      	ldr	r5, [pc, #40]	; (8002e9c <__libc_init_array+0x40>)
 8002e74:	4c0a      	ldr	r4, [pc, #40]	; (8002ea0 <__libc_init_array+0x44>)
 8002e76:	1b64      	subs	r4, r4, r5
 8002e78:	10a4      	asrs	r4, r4, #2
 8002e7a:	42a6      	cmp	r6, r4
 8002e7c:	d105      	bne.n	8002e8a <__libc_init_array+0x2e>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e84:	4798      	blx	r3
 8002e86:	3601      	adds	r6, #1
 8002e88:	e7ee      	b.n	8002e68 <__libc_init_array+0xc>
 8002e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8e:	4798      	blx	r3
 8002e90:	3601      	adds	r6, #1
 8002e92:	e7f2      	b.n	8002e7a <__libc_init_array+0x1e>
 8002e94:	08003118 	.word	0x08003118
 8002e98:	08003118 	.word	0x08003118
 8002e9c:	08003118 	.word	0x08003118
 8002ea0:	0800311c 	.word	0x0800311c

08002ea4 <malloc>:
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <malloc+0xc>)
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	f000 b87b 	b.w	8002fa4 <_malloc_r>
 8002eae:	bf00      	nop
 8002eb0:	2000002c 	.word	0x2000002c

08002eb4 <free>:
 8002eb4:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <free+0xc>)
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f000 b80b 	b.w	8002ed4 <_free_r>
 8002ebe:	bf00      	nop
 8002ec0:	2000002c 	.word	0x2000002c

08002ec4 <memset>:
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4402      	add	r2, r0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d100      	bne.n	8002ece <memset+0xa>
 8002ecc:	4770      	bx	lr
 8002ece:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed2:	e7f9      	b.n	8002ec8 <memset+0x4>

08002ed4 <_free_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	2900      	cmp	r1, #0
 8002eda:	d040      	beq.n	8002f5e <_free_r+0x8a>
 8002edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ee0:	1f0c      	subs	r4, r1, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bfb8      	it	lt
 8002ee6:	18e4      	addlt	r4, r4, r3
 8002ee8:	f000 f8e0 	bl	80030ac <__malloc_lock>
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <_free_r+0x8c>)
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	b933      	cbnz	r3, 8002f00 <_free_r+0x2c>
 8002ef2:	6063      	str	r3, [r4, #4]
 8002ef4:	6014      	str	r4, [r2, #0]
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002efc:	f000 b8dc 	b.w	80030b8 <__malloc_unlock>
 8002f00:	42a3      	cmp	r3, r4
 8002f02:	d908      	bls.n	8002f16 <_free_r+0x42>
 8002f04:	6820      	ldr	r0, [r4, #0]
 8002f06:	1821      	adds	r1, r4, r0
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	bf01      	itttt	eq
 8002f0c:	6819      	ldreq	r1, [r3, #0]
 8002f0e:	685b      	ldreq	r3, [r3, #4]
 8002f10:	1809      	addeq	r1, r1, r0
 8002f12:	6021      	streq	r1, [r4, #0]
 8002f14:	e7ed      	b.n	8002ef2 <_free_r+0x1e>
 8002f16:	461a      	mov	r2, r3
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	b10b      	cbz	r3, 8002f20 <_free_r+0x4c>
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	d9fa      	bls.n	8002f16 <_free_r+0x42>
 8002f20:	6811      	ldr	r1, [r2, #0]
 8002f22:	1850      	adds	r0, r2, r1
 8002f24:	42a0      	cmp	r0, r4
 8002f26:	d10b      	bne.n	8002f40 <_free_r+0x6c>
 8002f28:	6820      	ldr	r0, [r4, #0]
 8002f2a:	4401      	add	r1, r0
 8002f2c:	1850      	adds	r0, r2, r1
 8002f2e:	4283      	cmp	r3, r0
 8002f30:	6011      	str	r1, [r2, #0]
 8002f32:	d1e0      	bne.n	8002ef6 <_free_r+0x22>
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4401      	add	r1, r0
 8002f3a:	6011      	str	r1, [r2, #0]
 8002f3c:	6053      	str	r3, [r2, #4]
 8002f3e:	e7da      	b.n	8002ef6 <_free_r+0x22>
 8002f40:	d902      	bls.n	8002f48 <_free_r+0x74>
 8002f42:	230c      	movs	r3, #12
 8002f44:	602b      	str	r3, [r5, #0]
 8002f46:	e7d6      	b.n	8002ef6 <_free_r+0x22>
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	1821      	adds	r1, r4, r0
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	bf01      	itttt	eq
 8002f50:	6819      	ldreq	r1, [r3, #0]
 8002f52:	685b      	ldreq	r3, [r3, #4]
 8002f54:	1809      	addeq	r1, r1, r0
 8002f56:	6021      	streq	r1, [r4, #0]
 8002f58:	6063      	str	r3, [r4, #4]
 8002f5a:	6054      	str	r4, [r2, #4]
 8002f5c:	e7cb      	b.n	8002ef6 <_free_r+0x22>
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	200001a4 	.word	0x200001a4

08002f64 <sbrk_aligned>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	4e0e      	ldr	r6, [pc, #56]	; (8002fa0 <sbrk_aligned+0x3c>)
 8002f68:	460c      	mov	r4, r1
 8002f6a:	6831      	ldr	r1, [r6, #0]
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	b911      	cbnz	r1, 8002f76 <sbrk_aligned+0x12>
 8002f70:	f000 f88c 	bl	800308c <_sbrk_r>
 8002f74:	6030      	str	r0, [r6, #0]
 8002f76:	4621      	mov	r1, r4
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f887 	bl	800308c <_sbrk_r>
 8002f7e:	1c43      	adds	r3, r0, #1
 8002f80:	d00a      	beq.n	8002f98 <sbrk_aligned+0x34>
 8002f82:	1cc4      	adds	r4, r0, #3
 8002f84:	f024 0403 	bic.w	r4, r4, #3
 8002f88:	42a0      	cmp	r0, r4
 8002f8a:	d007      	beq.n	8002f9c <sbrk_aligned+0x38>
 8002f8c:	1a21      	subs	r1, r4, r0
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f000 f87c 	bl	800308c <_sbrk_r>
 8002f94:	3001      	adds	r0, #1
 8002f96:	d101      	bne.n	8002f9c <sbrk_aligned+0x38>
 8002f98:	f04f 34ff 	mov.w	r4, #4294967295
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	200001a8 	.word	0x200001a8

08002fa4 <_malloc_r>:
 8002fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa8:	1ccd      	adds	r5, r1, #3
 8002faa:	f025 0503 	bic.w	r5, r5, #3
 8002fae:	3508      	adds	r5, #8
 8002fb0:	2d0c      	cmp	r5, #12
 8002fb2:	bf38      	it	cc
 8002fb4:	250c      	movcc	r5, #12
 8002fb6:	2d00      	cmp	r5, #0
 8002fb8:	4607      	mov	r7, r0
 8002fba:	db01      	blt.n	8002fc0 <_malloc_r+0x1c>
 8002fbc:	42a9      	cmp	r1, r5
 8002fbe:	d905      	bls.n	8002fcc <_malloc_r+0x28>
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fcc:	4e2e      	ldr	r6, [pc, #184]	; (8003088 <_malloc_r+0xe4>)
 8002fce:	f000 f86d 	bl	80030ac <__malloc_lock>
 8002fd2:	6833      	ldr	r3, [r6, #0]
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	bb34      	cbnz	r4, 8003026 <_malloc_r+0x82>
 8002fd8:	4629      	mov	r1, r5
 8002fda:	4638      	mov	r0, r7
 8002fdc:	f7ff ffc2 	bl	8002f64 <sbrk_aligned>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	d14d      	bne.n	8003082 <_malloc_r+0xde>
 8002fe6:	6834      	ldr	r4, [r6, #0]
 8002fe8:	4626      	mov	r6, r4
 8002fea:	2e00      	cmp	r6, #0
 8002fec:	d140      	bne.n	8003070 <_malloc_r+0xcc>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	eb04 0803 	add.w	r8, r4, r3
 8002ff8:	f000 f848 	bl	800308c <_sbrk_r>
 8002ffc:	4580      	cmp	r8, r0
 8002ffe:	d13a      	bne.n	8003076 <_malloc_r+0xd2>
 8003000:	6821      	ldr	r1, [r4, #0]
 8003002:	3503      	adds	r5, #3
 8003004:	1a6d      	subs	r5, r5, r1
 8003006:	f025 0503 	bic.w	r5, r5, #3
 800300a:	3508      	adds	r5, #8
 800300c:	2d0c      	cmp	r5, #12
 800300e:	bf38      	it	cc
 8003010:	250c      	movcc	r5, #12
 8003012:	4638      	mov	r0, r7
 8003014:	4629      	mov	r1, r5
 8003016:	f7ff ffa5 	bl	8002f64 <sbrk_aligned>
 800301a:	3001      	adds	r0, #1
 800301c:	d02b      	beq.n	8003076 <_malloc_r+0xd2>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	442b      	add	r3, r5
 8003022:	6023      	str	r3, [r4, #0]
 8003024:	e00e      	b.n	8003044 <_malloc_r+0xa0>
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	1b52      	subs	r2, r2, r5
 800302a:	d41e      	bmi.n	800306a <_malloc_r+0xc6>
 800302c:	2a0b      	cmp	r2, #11
 800302e:	d916      	bls.n	800305e <_malloc_r+0xba>
 8003030:	1961      	adds	r1, r4, r5
 8003032:	42a3      	cmp	r3, r4
 8003034:	6025      	str	r5, [r4, #0]
 8003036:	bf18      	it	ne
 8003038:	6059      	strne	r1, [r3, #4]
 800303a:	6863      	ldr	r3, [r4, #4]
 800303c:	bf08      	it	eq
 800303e:	6031      	streq	r1, [r6, #0]
 8003040:	5162      	str	r2, [r4, r5]
 8003042:	604b      	str	r3, [r1, #4]
 8003044:	4638      	mov	r0, r7
 8003046:	f104 060b 	add.w	r6, r4, #11
 800304a:	f000 f835 	bl	80030b8 <__malloc_unlock>
 800304e:	f026 0607 	bic.w	r6, r6, #7
 8003052:	1d23      	adds	r3, r4, #4
 8003054:	1af2      	subs	r2, r6, r3
 8003056:	d0b6      	beq.n	8002fc6 <_malloc_r+0x22>
 8003058:	1b9b      	subs	r3, r3, r6
 800305a:	50a3      	str	r3, [r4, r2]
 800305c:	e7b3      	b.n	8002fc6 <_malloc_r+0x22>
 800305e:	6862      	ldr	r2, [r4, #4]
 8003060:	42a3      	cmp	r3, r4
 8003062:	bf0c      	ite	eq
 8003064:	6032      	streq	r2, [r6, #0]
 8003066:	605a      	strne	r2, [r3, #4]
 8003068:	e7ec      	b.n	8003044 <_malloc_r+0xa0>
 800306a:	4623      	mov	r3, r4
 800306c:	6864      	ldr	r4, [r4, #4]
 800306e:	e7b2      	b.n	8002fd6 <_malloc_r+0x32>
 8003070:	4634      	mov	r4, r6
 8003072:	6876      	ldr	r6, [r6, #4]
 8003074:	e7b9      	b.n	8002fea <_malloc_r+0x46>
 8003076:	230c      	movs	r3, #12
 8003078:	4638      	mov	r0, r7
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	f000 f81c 	bl	80030b8 <__malloc_unlock>
 8003080:	e7a1      	b.n	8002fc6 <_malloc_r+0x22>
 8003082:	6025      	str	r5, [r4, #0]
 8003084:	e7de      	b.n	8003044 <_malloc_r+0xa0>
 8003086:	bf00      	nop
 8003088:	200001a4 	.word	0x200001a4

0800308c <_sbrk_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	2300      	movs	r3, #0
 8003090:	4d05      	ldr	r5, [pc, #20]	; (80030a8 <_sbrk_r+0x1c>)
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	f7fd fd9e 	bl	8000bd8 <_sbrk>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_sbrk_r+0x1a>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_sbrk_r+0x1a>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200001ac 	.word	0x200001ac

080030ac <__malloc_lock>:
 80030ac:	4801      	ldr	r0, [pc, #4]	; (80030b4 <__malloc_lock+0x8>)
 80030ae:	f000 b809 	b.w	80030c4 <__retarget_lock_acquire_recursive>
 80030b2:	bf00      	nop
 80030b4:	200001b0 	.word	0x200001b0

080030b8 <__malloc_unlock>:
 80030b8:	4801      	ldr	r0, [pc, #4]	; (80030c0 <__malloc_unlock+0x8>)
 80030ba:	f000 b804 	b.w	80030c6 <__retarget_lock_release_recursive>
 80030be:	bf00      	nop
 80030c0:	200001b0 	.word	0x200001b0

080030c4 <__retarget_lock_acquire_recursive>:
 80030c4:	4770      	bx	lr

080030c6 <__retarget_lock_release_recursive>:
 80030c6:	4770      	bx	lr

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
