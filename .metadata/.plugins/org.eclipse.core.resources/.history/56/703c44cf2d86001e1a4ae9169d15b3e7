/*
 * fsm.c
 *
 *  Created on: Oct 23, 2023
 *      Author: Admin
 */
#include "fsm.h"

enum ButtonState{BUTTON_1_PRESSED, BUTTON_2_PRESSED, BUTTON_3_PRESSED};
enum ButtonState buttonState = BUTTON_1_PRESSED;

void fsm_mode(void){
	if(is_button_pressed(1)){
		buttonState = BUTTON_1_PRESSED;
	}else if(is_button_pressed(2)){
		buttonState = BUTTON_2_PRESSED;
	}else if(is_button_pressed(3) && buttonState == BUTTON_2_PRESSED){
		buttonState = BUTTON_3_PRESSED;
	}
	switch(buttonState){
	case BUTTON_1_PRESSED:
		mode_1();
		break;
	case BUTTON_2_PRESSED:
		mode_2();
		break;
	case BUTTON_3_PRESSED:
		mode_3();
		break;
	}
}

uint8_t red_counter = 10;
uint8_t green_counter = 8;

enum TrafficState{GREEN_1, YELLOW_1, GREEN_2, YELLOW_2};
enum TrafficState trafficstate = GREEN_1;

static int time_1 = 0;
static int time_2 = 0;


static uint8_t led7state = 0;
void mode_1(void){
	if(time_1 <= 0 || time_2 <= 0){
		switch (trafficstate){
			case GREEN_1:
				HAL_GPIO_WritePin(RED_1_PORT, RED_1_PIN, RESET);
				HAL_GPIO_WritePin(GREEN_1_PORT, GREEN_1_PIN, SET);
				HAL_GPIO_WritePin(RED_2_PORT, RED_2_PIN, SET);
				trafficstate = YELLOW_1;
				time_1 = green_counter;
				time_2 = red_counter;
				//setTrafficTimer(green_counter);
				break;
			case YELLOW_1:
				HAL_GPIO_WritePin(GREEN_1_PORT, GREEN_1_PIN, RESET);
				HAL_GPIO_WritePin(YELLOW_1_PORT, YELLOW_1_PIN, SET);
				trafficstate = GREEN_2;
				time_1 = red_counter-green_counter;
				//setTrafficTimer(red_counter-green_counter);
				break;
			case GREEN_2:
				HAL_GPIO_WritePin(RED_1_PORT, RED_2_PIN, RESET);
				HAL_GPIO_WritePin(GREEN_2_PORT, GREEN_2_PIN, SET);
				HAL_GPIO_WritePin(RED_1_PORT, RED_1_PIN, SET);
				trafficstate = YELLOW_2;
				time_1 = red_counter;
				time_2 = green_counter;
				//setTrafficTimer(green_counter);
				break;
			case YELLOW_2:
				HAL_GPIO_WritePin(GREEN_2_PORT, GREEN_2_PIN, RESET);
				HAL_GPIO_WritePin(YELLOW_2_PORT, YELLOW_2_PIN, SET);
				trafficstate = GREEN_1;
				time_2 = red_counter-green_counter;
				//setTrafficTimer(yellow_counter);
				break;
		}
	}
	if(getTimerFlag(0)){
		control7SEG(led7state, time_1, time_2);
		resetTimerFlag(0);
		led7state++;
		if(led7state > 3){
			led7state = 0;
			time_1--;
			time_2--;
		}
		set7SEGTimer(250);
	}
}

enum TrafficConfigTime{RED_TIME, GREEN_TIME};
enum TrafficConfigTime timeMode = RED_TIME;
void mode_2(void){
	switch(timeMode){
	case RED_TIME:
		set7SEGTimer(500);
		if()
		break;
	case GREEN_TIME:
		break;
	}
}
